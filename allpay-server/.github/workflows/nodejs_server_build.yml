name: build-allpay-server

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACR_LOGIN_SRV: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/bof_allpay_server_${{ github.ref_name }}:${{ github.sha }}
  IMAGE_NAME_LATEST: ${{ secrets.ACR_NAME }}.azurecr.io/bof_allpay_server_${{ github.ref_name }}:latest

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # type of runner
    runs-on: ubuntu-latest
    environment: production
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NODE_ENV: ${{ vars.NODE_ENV }}

    # sequence of tasks
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v2.5.0
        with:
          node-version: '18.x'

      - name: install and build
        run: |
          yarn --prod=false
          yarn build
      - name: Update DB
        run: |
          npx prisma db push

      - name: Create env file
        run: |
          touch .env
          echo NODE_ENV=${{ vars.NODE_ENV }} >> .env
          echo ACCESS_TOKEN_SECRET=${{ secrets.JWT_SECRET_KEY }} >> .env
          echo REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo CLIENT_HOST=${{ vars.CLIENT_HOST }} >> .env
          echo PORT=${{ vars.PORT }} >> .env
          echo SMTP_HOST=${{ vars.SMTP_HOST }} >> .env
          echo SMTP_PORT=${{ vars.SMTP_PORT }} >> .env
          echo SMTP_USERNAME=${{ vars.SMTP_USERNAME }} >> .env
          echo SMTP_PASSWORD=${{ vars.SMTP_PASSWORD }} >> .env

      - uses: actions/upload-artifact@v2
        with:
          name: env_file
          path: .env

  build_and_push_to_acr:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: env_file

      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SRV }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - run: docker build . -t ${{ env.IMAGE_NAME_LATEST }}
      - run: docker push ${{ env.IMAGE_NAME_LATEST }}

      - run: docker tag ${{ env.IMAGE_NAME_LATEST }} ${{ env.IMAGE_NAME }}
      - run: docker push ${{ env.IMAGE_NAME }}
